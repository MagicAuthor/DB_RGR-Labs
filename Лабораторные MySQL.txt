------ ЗАДАНИЕ 3 ------

• Вывести списки групп по заданному направлению с указанием номера группы в формате ФИО, бюджет/внебюджет. Студентов выводить в алфавитном порядке.
SELECT `Students`.`name` as `Студент`, `Group`.`designation` as `Группа`, if (`Students`.`budget_place` = 1, "Бюджет", "Внебюджет") as `Бюджет` FROM `Students` JOIN `Group` ON `Group`.`id` = `Students`.`id_group` ORDER BY `Students`.`name`;

• Вывести студентов с фамилией, начинающейся с первой буквы вашей фамилии, с указанием ФИО, номера группы и направления обучения.
SELECT `Students`.`name` As `Студент`, `Group`.`designation` As `Группа`, `Direction`.`title` As `Направление` FROM `Direction` JOIN `Group` ON `Direction`.`id`=`Group`.`direction_id` JOIN `Students` ON (`Students`.`id_group`=`Group`.`id` AND `name` LIKE 'К%')

• Вывести список студентов для поздравления по месяцам в формате Фамилия И.О., день и название месяца рождения, номером группы и направлением обучения.
SELECT CONCAT(LEFT(`name`, LOCATE(' ', `name`)),
              CONCAT(LEFT(RIGHT(`name`, CHAR_LENGTH(`name`) - LOCATE(' ', `name`)), 1), '. '),
              CONCAT(LEFT(RIGHT(`name`, CHAR_LENGTH(`name`) - LOCATE(' ', `name`, (LOCATE(' ', `name`) + 1))), 1), '.')) as `Студент`,
DAYOFMONTH(`Students`.`date_of_birth`) as `День`,
CASE
	WHEN MONTHNAME(`Students`.`date_of_birth`) = "January" 
    	THEN "Январь"
    WHEN MONTHNAME(`Students`.`date_of_birth`) = "February" 
    	THEN "Февраль"
    WHEN MONTHNAME(`Students`.`date_of_birth`) = "March" 
    	THEN "Март"
    WHEN MONTHNAME(`Students`.`date_of_birth`) = "April" 
    	THEN "Апрель"
    WHEN MONTHNAME(`Students`.`date_of_birth`) = "May" 
    	THEN "Май"
    WHEN MONTHNAME(`Students`.`date_of_birth`) = "June" 
    	THEN "Июнь"
    WHEN MONTHNAME(`Students`.`date_of_birth`) = "July" 
    	THEN "Июль"
    WHEN MONTHNAME(`Students`.`date_of_birth`) = "August" 
    	THEN "Август"
    WHEN MONTHNAME(`Students`.`date_of_birth`) = "September" 
    	THEN "Сентябрь"
    WHEN MONTHNAME(`Students`.`date_of_birth`) = "October" 
    	THEN "Октябрь"
    WHEN MONTHNAME(`Students`.`date_of_birth`) = "November" 
    	THEN "Ноябрь"
    WHEN MONTHNAME(`Students`.`date_of_birth`) = "December" 
    	THEN "Декабрь"
 END AS 'Месяц',
 `Group`.`designation` as `Группа`,
`Direction`.`title` as `Направление`
FROM `Students`
JOIN `Group` ON `Group`.`id` = `Students`.`id_group`
JOIN `Direction` ON `Direction`.`id` = `Group`.`direction_id`
ORDER BY MONTH(`Students`.`date_of_birth`); 

• Вывести студентов с указанием возраста в годах.
SELECT `Students`.`name`, (YEAR(CURRENT_DATE)-YEAR(`date_of_birth`)) AS `age` FROM `Students`

• Вывести студентов, у которых день рождения в текущем месяце.
SELECT `Students`.`name` as `Студент`, `Students`.`date_of_birth` AS `Дата рождения (этот месяц)` FROM `Students` WHERE MONTH(`date_of_birth`) = MONTH(NOW())

• Вывести количество студентов по каждому направлению.
SELECT COUNT(`Students`.`name`) AS `Количество студентов`, `Direction`.`title` AS `Направление` FROM `Direction` JOIN `Group` ON `Group`.`direction_id`=`Direction`.`id` JOIN `Students` ON `Students`.`id_group`=`Group`.`id` GROUP BY `Direction`.`title`

• Вывести количество бюджетных и внебюджетных мест по группам. Для каждой группы вывести номер и название направления.
SELECT
    `Group`.`designation` AS `Группа`,
    `Direction`.`title` AS `Направление`,
    SUM(`Students`.`budget_place` = 1) AS `Кол-во бюджетных мест`,
    SUM(`Students`.`budget_place` = 0) AS `Кол-во внебюджетных мест`
FROM
    Students
JOIN
    `Group` ON `Students`.`id_group` = `Group`.`id`
JOIN
    `Direction` ON `Group`.`direction_id` = `Direction`.`id`
GROUP BY
    `Group`.`id` 

------ ЗАДАНИЕ 5 ------
 
• Вывести списки групп каждому предмету с указанием преподавателя.
SELECT `Direction`.`title` AS `Направление`, `Group`.`designation` AS `Группа`,`Teachers`.`name_t` AS `Преподаватель`, `Subjects`.`subject` AS `Предмет` FROM `Direction` JOIN `teachers_and_subjects` ON `teachers_and_subjects`.`direction_id` = `Direction`.`id`  JOIN `Group` ON `Group`.`direction_id` = `Direction`.`id` JOIN `Teachers` ON `Teachers`.`id` = `teachers_and_subjects`.`teacher_id` JOIN `Subjects` ON `teachers_and_subjects`.`subject_id` = `Subjects`.`id`

• Определить, какую дисциплину изучает максимальное количество студентов.
SELECT `Subjects`.`subject` as `Дисциплина`, COUNT(`Students`.`name`) as `Сколько студентов изучает` FROM `Subjects` JOIN `teachers_and_subjects` ON `teachers_and_subjects`.`subject_id` = `Subjects`.`id` JOIN `Marks` ON `Marks`.`tas_id` = `teachers_and_subjects`.`id` JOIN `Students` ON `Marks`.`student_id` = `Students`.`id` GROUP BY `Subjects`.`subject` ORDER BY COUNT(`Students`.`name`) DESC LIMIT 1

• Определить сколько студентов обучатся у каждого их преподавателей.
SELECT `Teachers`.`name_t`, COUNT(`Students`.`id`) as `Кол-во студентов` FROM `Teachers` JOIN `teachers_and_subjects` ON `teachers_and_subjects`.`teacher_id` = `Teachers`.`id` JOIn `Marks` ON `Marks`.`tas_id` = `teachers_and_subjects`.`id` JOIN `Students` ON `Students`.`id` = `Marks`.`student_id` GROUP BY `Teachers`.`name_t`

• Определить долю сдавших студентов по каждой дисциплине ("нет оценки" или "2" считать не сдавшими)
-- 0 - значит нет оценки
-- 2 - значит дисциплина не сдана
SELECT `Subjects`.`subject` as `Дисциплина`, COUNT(IF(`Marks`.`mark` > 2, 1, NULL)) as `Кол-во сдавших` FROM `Subjects` JOIN `teachers_and_subjects` ON `teachers_and_subjects`.`subject_id` = `Subjects`.`id` JOIN `Marks` ON `Marks`.`tas_id` = `teachers_and_subjects`.`id` JOIN `Students` ON `Marks`.`student_id` = `Students`.`id` GROUP BY `Subjects`.`subject` ORDER BY COUNT(`Students`.`name`) DESC

• Определить среднюю оценку по предметам (для сдавших студентов)
SELECT `Subjects`.`subject` as `Дисциплина`, AVG(IF(`Marks`.`mark` > 0, `Marks`.`mark`, NULL)) as `Среднее значение` FROM `Subjects` JOIN `teachers_and_subjects` ON `teachers_and_subjects`.`subject_id` = `Subjects`.`id` JOIN `Marks` ON `Marks`.`tas_id` = `teachers_and_subjects`.`id` JOIN `Students` ON `Marks`.`student_id` = `Students`.`id` GROUP BY `Subjects`.`subject` ORDER BY COUNT(`Students`.`name`) DESC

• Определить группу с максимальной средней оценкой (включая не сдавших)
SELECT `Group`.`designation`, AVG(`Marks`.`mark`) as `Максимальная оценка` FROM `Group` JOIN `Direction` ON `Direction`.`id` = `Group`.`direction_id` JOIN `teachers_and_subjects` ON `teachers_and_subjects`.`direction_id` = `Direction`.`id` JOIN `Marks` ON `Marks`.`tas_id` = `teachers_and_subjects`.`id` GROUP BY `Group`.`designation` LIMIT 1
• Вывести студентов со всем оценками отлично и не имеющих несданный экзамен
SELECT `Students`.`name` FROM `Students` INNER JOIN `Marks` ON `Students`.`id` = `Marks`.`student_id` WHERE `Marks`.`mark` = 5 GROUP BY `Students`.`id` HAVING COUNT(`Marks`.`mark`) = 3 AND NOT EXISTS (
 SELECT 1 FROM `Marks` WHERE `Marks`.`student_id` = `Students`.`id` AND `Marks`.`mark` < 2);

• Вывести кандидатов на отчисление (не сдан не менее двух предметов)
SELECT `Students`.`name` FROM `Students` JOIN `Marks` ON `Students`.`id` = `Marks`.`student_id` WHERE `Marks`.`mark` IN (0, 2) GROUP BY `Students`.`name`

------ ЗАДАНИЕ 7 ------
• Вывести по заданному предмету количество посещенных занятий.
SELECT COUNT(*) AS "Посещаемость предмета" FROM `Attendance` JOIN `Study_schedule` ON `Attendance`.`schedule_id` = `Study_schedule`.`id` JOIN `Subjects` ON `Study_schedule`.`subj_id` = `Subjects`.`id` WHERE `Subjects`.`subject` = 'Техническая эксплуатация летательных аппаратов и двигателей' AND `Attendance`.`attend` = 1


• Вывести по заданному предмету количество пропущенных занятий.
SELECT COUNT(*) AS "Пропуски предмета студентами" FROM `Attendance` JOIN `Study_schedule` ON `Attendance`.`schedule_id` = `Study_schedule`.`id` JOIN `Subjects` ON `Study_schedule`.`subj_id` = `Subjects`.`id` WHERE `Subjects`.`subject` = 'Техническая эксплуатация летательных аппаратов и двигателей' AND `Attendance`.`attend` = 0

• Вывести по заданному преподавателю количество студентов на каждом занятии.
SELECT `Teachers`.`name_t`, `Study_schedule`.`date_lesson`, COUNT(*) FROM `Teachers` JOIN `teachers_and_subjects` ON `teachers_and_subjects`.`teacher_id` = `Teachers`.`id`
JOIN `Study_schedule` ON `Study_schedule`.`subj_id` = `teachers_and_subjects`.`id` JOIN `Attendance` ON `Attendance`.`schedule_id` = `Study_schedule`.`id` WHERE `Attendance`.`attend`=1
GROUP BY `Teachers`.`id`, `Study_schedule`.`id`

• Для каждого студента вывести общее время, потраченное на изучение каждого предмета.
SELECT `Students`.`name`, `Subjects`.`subject`, `Study_schedule`.`date_lesson`, COUNT(*)*1.5 FROM `Students`
JOIN `Attendance` ON `Attendance`.`stud_id` = `Students`.`id`
JOIN `Study_schedule` ON `Study_schedule`.`id` = `Attendance`.`schedule_id`
JOIN `teachers_and_subjects` ON `teachers_and_subjects`.`id` = `Study_schedule`.`subj_id`
JOIN `Subjects` ON `Subjects`.`id` = `teachers_and_subjects`.`subject_id`
WHERE `Attendance`.`attend`=1 GROUP BY `Students`.`id`, `Subjects`.`id`